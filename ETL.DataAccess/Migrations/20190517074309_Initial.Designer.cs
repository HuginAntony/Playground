// <auto-generated />
using System;
using ETL.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ETL.DataAccess.Migrations
{
    [DbContext(typeof(JadeDWContext))]
    [Migration("20190517074309_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ETL.DataAccess.Models.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassificationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassificationGroupId")
                        .HasColumnName("ClassificationGroupID");

                    b.Property<int?>("ClassificationHeaderId")
                        .HasColumnName("ClassificationHeaderID");

                    b.Property<int?>("ClassificationOptionList");

                    b.Property<string>("ClassificationSchema")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DataCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("DataDescription")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<bool?>("IsOptionList");

                    b.Property<bool?>("IsRemoved");

                    b.Property<int>("Sequence");

                    b.HasKey("ClassificationId");

                    b.HasIndex("ClassificationHeaderId");

                    b.HasIndex("ClassificationGroupId", "DataCode")
                        .IsUnique()
                        .HasName("UQ_ReferenceData_Classification")
                        .HasFilter("[ClassificationGroupID] IS NOT NULL AND [DataCode] IS NOT NULL");

                    b.ToTable("Classification","ReferenceData");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimClient", b =>
                {
                    b.Property<int>("ClientKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(120);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(120);

                    b.Property<string>("ClientAlternateKey")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool?>("CurrentFlag")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<string>("Prefix")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Suffix")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("ClientKey")
                        .HasName("PK_DimCustomer_CustomerKey");

                    b.HasIndex("ClientAlternateKey")
                        .IsUnique()
                        .HasName("IX_DimCustomer_CustomerAlternateKey");

                    b.ToTable("DimClient");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimCompany", b =>
                {
                    b.Property<int>("CompanyKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AddressVerified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AlternateKey")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<int?>("CitcollectionCycle")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CITCollectionCycle")
                        .HasDefaultValueSql("((7))");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CityGl")
                        .HasColumnName("CityGL")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("CityTaxRate")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("CompanyDba")
                        .HasColumnName("CompanyDBA")
                        .HasMaxLength(60);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<bool>("CurrentFlag");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("date");

                    b.Property<decimal?>("DepositRequirement")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<int?>("Fein")
                        .HasColumnName("FEIN");

                    b.Property<bool?>("Feinverified")
                        .HasColumnName("FEINVerified");

                    b.Property<int?>("Fikey")
                        .HasColumnName("FIKey");

                    b.Property<bool>("IsParent");

                    b.Property<bool?>("IsTaxImpoundCity");

                    b.Property<bool?>("IsTaxImpoundState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool?>("NameVerified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ParentCompanyKey");

                    b.Property<double?>("ParentPercentageOfOwnership");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool?>("PhoneVerified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ProjectedAnnualSales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ProjectedDailySales")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(([ProjectedAnnualSales]*(1))/(365))");

                    b.Property<decimal?>("ProjectedWeeklySales")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(([ProjectedAnnualSales]*(7))/(365))");

                    b.Property<string>("SettlementAccount")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("StateGl")
                        .HasColumnName("StateGL")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<decimal?>("StateTaxRate")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<string>("StreetAddress1")
                        .IsRequired();

                    b.Property<string>("StreetAddress2");

                    b.Property<int?>("Zip");

                    b.HasKey("CompanyKey")
                        .HasName("PK_DimOrganization");

                    b.HasIndex("Fikey");

                    b.HasIndex("ParentCompanyKey");

                    b.ToTable("DimCompany");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimCompanyAccount", b =>
                {
                    b.Property<int>("AccountKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("CurrentFlag")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<int>("Fikey")
                        .HasColumnName("FIKey");

                    b.Property<int>("OrganizationKey");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccountKey")
                        .HasName("PK_DimAccounts");

                    b.HasIndex("Fikey");

                    b.HasIndex("OrganizationKey");

                    b.ToTable("DimCompanyAccount");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimCurrency", b =>
                {
                    b.Property<int>("CurrencyKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencyAlternateKey")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("CurrencyKey")
                        .HasName("PK_DimCurrency_CurrencyKey");

                    b.HasIndex("CurrencyAlternateKey")
                        .IsUnique()
                        .HasName("AK_DimCurrency_CurrencyAlternateKey");

                    b.ToTable("DimCurrency");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimDataVendor", b =>
                {
                    b.Property<int>("VendorKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasColumnName("VendorID")
                        .HasMaxLength(30);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("VendorKey");

                    b.HasIndex("VendorId")
                        .IsUnique()
                        .HasName("IX_DimDataVendor");

                    b.ToTable("DimDataVendor");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimDate", b =>
                {
                    b.Property<int>("DateKey");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("Day");

                    b.Property<short>("DayOfYear");

                    b.Property<string>("DaySuffix")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<byte>("DowinMonth")
                        .HasColumnName("DOWInMonth");

                    b.Property<DateTime>("FirstDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextYear")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfYear")
                        .HasColumnType("date");

                    b.Property<string>("HolidayText")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsHoliday");

                    b.Property<bool>("IsWeekend");

                    b.Property<byte>("IsoweekOfYear")
                        .HasColumnName("ISOWeekOfYear");

                    b.Property<DateTime>("LastDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfYear")
                        .HasColumnType("date");

                    b.Property<string>("Mmyyyy")
                        .IsRequired()
                        .HasColumnName("MMYYYY")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<byte>("Month");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MonthYear")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<byte>("Quarter");

                    b.Property<string>("QuarterName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<byte>("WeekOfMonth");

                    b.Property<byte>("WeekOfYear");

                    b.Property<byte>("Weekday");

                    b.Property<int>("Year");

                    b.HasKey("DateKey")
                        .HasName("PK_DimDate_DateKey");

                    b.ToTable("DimDate");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimEmployee", b =>
                {
                    b.Property<int>("EmployeeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlternateKey");

                    b.Property<string>("City")
                        .HasMaxLength(64);

                    b.Property<bool?>("CurrentFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50);

                    b.Property<string>("Dlnumber")
                        .HasColumnName("DLNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Dlstate")
                        .HasColumnName("DLState")
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Etlid")
                        .HasColumnName("ETLID")
                        .HasMaxLength(10);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30);

                    b.Property<string>("Prefix")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .HasMaxLength(19)
                        .IsUnicode(false);

                    b.Property<string>("StreetAddress1")
                        .HasMaxLength(45);

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(45);

                    b.Property<string>("Suffix")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("EmployeeKey")
                        .HasName("PK_DimEmployee_EmployeeKey");

                    b.HasIndex("EmployeeKey")
                        .IsUnique()
                        .HasName("IX_DimEmployee_SSN");

                    b.ToTable("DimEmployee");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimFinancialInstitution", b =>
                {
                    b.Property<int>("Fikey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FIKey")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountRange")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("FialternateKey")
                        .IsRequired()
                        .HasColumnName("FIAlternateKey")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Fikey");

                    b.HasIndex("FialternateKey")
                        .IsUnique()
                        .HasName("IX_DimFinancialInstitution");

                    b.ToTable("DimFinancialInstitution");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimLocation", b =>
                {
                    b.Property<int>("LocationKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<bool?>("IsCurrent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LocationAddressLine1");

                    b.Property<string>("LocationAddressLine2");

                    b.Property<string>("LocationCity")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LocationCountry")
                        .HasMaxLength(80);

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(100);

                    b.Property<decimal?>("LocationGpslatitude")
                        .HasColumnName("LocationGPSLatitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("LocationGpslongtitude")
                        .HasColumnName("LocationGPSLongtitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnName("LocationID")
                        .HasMaxLength(30);

                    b.Property<string>("LocationState")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<int?>("LocationZip")
                        .HasColumnName("LocationZIP");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("LocationKey");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasName("IX_DimLocation");

                    b.ToTable("DimLocation");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimProduct", b =>
                {
                    b.Property<int>("ProductKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CurrentFlag");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<bool?>("IsBatchTrackingRequired")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsInventoryTrackingRequired")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsSaleable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ItemGroupCategory")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ItemGroupDescription")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ItemType")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("ProductAlternateKey")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UnitofMeasure")
                        .HasMaxLength(10);

                    b.HasKey("ProductKey")
                        .HasName("PK_DimProduct_ProductKey");

                    b.HasIndex("ProductAlternateKey")
                        .IsUnique()
                        .HasName("AK_DimProduct_ProductAlternateKey");

                    b.ToTable("DimProduct");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductCategoryAlternateKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProductCategoryKey")
                        .HasName("PK_DimProductCategory_ProductCategoryKey");

                    b.HasIndex("ProductCategoryAlternateKey")
                        .IsUnique()
                        .HasName("AK_DimProductCategory_ProductCategoryAlternateKey");

                    b.ToTable("DimProductCategory");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductCategoryKey");

                    b.Property<string>("ProductSubcategoryAlternateKey")
                        .HasMaxLength(50);

                    b.Property<string>("ProductSubcategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProductSubcategoryKey")
                        .HasName("PK_DimProductSubcategory_ProductSubcategoryKey");

                    b.HasIndex("ProductCategoryKey");

                    b.HasIndex("ProductSubcategoryAlternateKey")
                        .IsUnique()
                        .HasName("AK_DimProductSubcategory_ProductSubcategoryAlternateKey")
                        .HasFilter("[ProductSubcategoryAlternateKey] IS NOT NULL");

                    b.ToTable("DimProductSubcategory");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimPromotion", b =>
                {
                    b.Property<int>("PromotionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("DiscountPct");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EnglishPromotionCategory")
                        .HasMaxLength(50);

                    b.Property<string>("EnglishPromotionName")
                        .HasMaxLength(255);

                    b.Property<string>("EnglishPromotionType")
                        .HasMaxLength(50);

                    b.Property<int?>("MaxQty");

                    b.Property<int?>("MinQty");

                    b.Property<int?>("PromotionAlternateKey");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PromotionKey")
                        .HasName("PK_DimPromotion_PromotionKey");

                    b.HasIndex("PromotionAlternateKey")
                        .IsUnique()
                        .HasName("AK_DimPromotion_PromotionAlternateKey")
                        .HasFilter("[PromotionAlternateKey] IS NOT NULL");

                    b.ToTable("DimPromotion");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimTime", b =>
                {
                    b.Property<int>("TimeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmPm")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("MilitaryHour")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Second")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("StandardTime")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.HasKey("TimeKey")
                        .HasName("PK_dim_Time");

                    b.HasIndex("AmPm")
                        .HasName("IDX_dim_Time_AmPm");

                    b.HasIndex("Hour")
                        .HasName("IDX_dim_Time_Hour");

                    b.HasIndex("MilitaryHour")
                        .HasName("IDX_dim_Time_MilitaryHour");

                    b.HasIndex("Minute")
                        .HasName("IDX_dim_Time_Minute");

                    b.HasIndex("Second")
                        .HasName("IDX_dim_Time_Second");

                    b.HasIndex("StandardTime")
                        .HasName("IDX_dim_Time_StandardTime");

                    b.HasIndex("Time")
                        .IsUnique()
                        .HasName("IDX_dim_Time_Time");

                    b.ToTable("DimTime");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimUnitOfMeasure", b =>
                {
                    b.Property<int>("Uomkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UOMKey")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("ConversionFactor");

                    b.Property<int?>("ConversionKey");

                    b.Property<string>("Uomdescription")
                        .IsRequired()
                        .HasColumnName("UOMDescription")
                        .HasMaxLength(10);

                    b.HasKey("Uomkey");

                    b.HasIndex("ConversionKey");

                    b.ToTable("DimUnitOfMeasure");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactCitcollection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CollectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CanisterSerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("CitcollectionTotalActualAmount")
                        .HasColumnName("CITCollectionTotalActualAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("CitcollectionTotalAmount")
                        .HasColumnName("CITCollectionTotalAmount")
                        .HasColumnType("money");

                    b.Property<decimal?>("CitcollectionTotalSurplusShortage")
                        .HasColumnName("CITCollectionTotalSurplusShortage")
                        .HasColumnType("money");

                    b.Property<string>("CitoperatorName")
                        .HasColumnName("CITOperatorName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("CollectedInCycle");

                    b.Property<int>("CollectionDateKey");

                    b.Property<DateTime>("CollectionDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("CollectionTimeKey");

                    b.Property<int>("CompanyKey");

                    b.Property<string>("CorrectionReason")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("CurrencyKey");

                    b.Property<int>("DataVendorKey");

                    b.Property<int?>("Delivered");

                    b.Property<int?>("Denom100Count");

                    b.Property<int?>("Denom100Total");

                    b.Property<int?>("Denom10Count");

                    b.Property<int?>("Denom10Total");

                    b.Property<int?>("Denom10cCount");

                    b.Property<int?>("Denom10cTotal");

                    b.Property<int?>("Denom1Count");

                    b.Property<int?>("Denom1Total");

                    b.Property<int?>("Denom1cCount");

                    b.Property<int?>("Denom1cTotal");

                    b.Property<int?>("Denom20Count");

                    b.Property<int?>("Denom20Total");

                    b.Property<int?>("Denom25cCount");

                    b.Property<int?>("Denom25cTotal");

                    b.Property<int?>("Denom2Count");

                    b.Property<int?>("Denom2Total");

                    b.Property<int?>("Denom50Count");

                    b.Property<int?>("Denom50Total");

                    b.Property<int?>("Denom50cCount");

                    b.Property<int?>("Denom50cTotal");

                    b.Property<int?>("Denom5Count");

                    b.Property<int?>("Denom5Total");

                    b.Property<int?>("Denom5cCount");

                    b.Property<int?>("Denom5cTotal");

                    b.Property<int?>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<DateTime?>("InsertDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsCorrected");

                    b.Property<bool?>("IsTampered");

                    b.Property<int>("LocationKey");

                    b.Property<string>("SealNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Total")
                        .HasColumnType("money");

                    b.Property<int?>("TotalNumberofNotes");

                    b.HasKey("CollectionId")
                        .HasName("PK_CITCollection");

                    b.HasIndex("CollectionDateKey");

                    b.HasIndex("CollectionTimeKey");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("DataVendorKey");

                    b.HasIndex("LocationKey");

                    b.ToTable("FactCITCollection");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactFitransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("money");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("CompanyKey");

                    b.Property<int>("DateKey");

                    b.Property<int?>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<DateTime?>("InsertDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TimeKey");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("money");

                    b.Property<string>("TransactionDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("TransactionId");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("DateKey");

                    b.HasIndex("TimeKey");

                    b.ToTable("FactFITransaction");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactProductInventory", b =>
                {
                    b.Property<int>("InventoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("AllocatedQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(30);

                    b.Property<int?>("BeginningQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("BreakageQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("CompanyKey");

                    b.Property<int>("DateKey");

                    b.Property<int?>("EndingQty");

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int?>("HoldQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("InsertDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IntransitQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(case when datediff(day,isnull([ExpiryDate],getdate()),getdate())>(0) then (1) else (0) end)");

                    b.Property<int>("LocationKey");

                    b.Property<string>("LotNumber")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("date");

                    b.Property<int?>("OpenQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("ProductKey");

                    b.Property<int?>("SalesQty")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("TimeKey");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("money");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("VendorKey");

                    b.HasKey("InventoryKey");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("DateKey");

                    b.HasIndex("LocationKey");

                    b.HasIndex("TimeKey");

                    b.HasIndex("VendorKey");

                    b.HasIndex("ProductKey", "CompanyKey", "HoldQty", "BreakageQty", "IntransitQty", "AllocatedQty", "AddQty", "SalesQty", "DateKey")
                        .HasName("IX_Inventory1");

                    b.ToTable("FactProductInventory");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactSales", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CitdepositId")
                        .HasColumnName("CITDepositID");

                    b.Property<decimal?>("CityTax")
                        .HasColumnType("money");

                    b.Property<int?>("CityTaxDepositId")
                        .HasColumnName("CityTaxDepositID");

                    b.Property<int>("CompanyKey");

                    b.Property<decimal?>("CountyTax")
                        .HasColumnType("money");

                    b.Property<int>("CurrencyKey");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Etlid")
                        .HasColumnName("ETLID");

                    b.Property<decimal?>("ExpectedCityTax")
                        .HasColumnType("money");

                    b.Property<decimal?>("ExpectedDeposit")
                        .HasColumnType("money");

                    b.Property<decimal?>("ExpectedStateTax")
                        .HasColumnType("money");

                    b.Property<int?>("FidepositId")
                        .HasColumnName("FIDepositID");

                    b.Property<decimal?>("Freight")
                        .HasColumnType("money");

                    b.Property<DateTime?>("InsertDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LocationKey");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderDateKey");

                    b.Property<int>("OrderTimeKey");

                    b.Property<string>("Posid")
                        .IsRequired()
                        .HasColumnName("POSID")
                        .HasMaxLength(30);

                    b.Property<string>("PosuserId")
                        .HasColumnName("POSUserID")
                        .HasMaxLength(50);

                    b.Property<int>("ProductKey");

                    b.Property<int?>("PromotionKey");

                    b.Property<double>("SaleDiscountAmount");

                    b.Property<double>("SaleDiscountPercentage");

                    b.Property<string>("SaleOrderNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("money");

                    b.Property<short>("SaleQuantity");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("money");

                    b.Property<int?>("SalesEmployeeKey");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StateTax")
                        .HasColumnType("money");

                    b.Property<int?>("StateTaxDepositId")
                        .HasColumnName("StateTaxDepositID");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int>("VendorKey");

                    b.HasKey("SalesId")
                        .HasName("PK_FactSales_1");

                    b.HasIndex("CompanyKey");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("LocationKey");

                    b.HasIndex("OrderDateKey");

                    b.HasIndex("OrderTimeKey");

                    b.HasIndex("ProductKey");

                    b.HasIndex("PromotionKey");

                    b.HasIndex("SalesEmployeeKey");

                    b.HasIndex("VendorKey");

                    b.ToTable("FactSales");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.Classification", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.Classification", "ClassificationGroup")
                        .WithMany("InverseClassificationGroup")
                        .HasForeignKey("ClassificationGroupId")
                        .HasConstraintName("FK_Classification_GroupID");

                    b.HasOne("ETL.DataAccess.Models.Classification", "ClassificationHeader")
                        .WithMany("InverseClassificationHeader")
                        .HasForeignKey("ClassificationHeaderId")
                        .HasConstraintName("FK_Classification_HeaderID");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimCompany", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimFinancialInstitution", "FikeyNavigation")
                        .WithMany("DimCompany")
                        .HasForeignKey("Fikey")
                        .HasConstraintName("FK_DimOrganization_DimFinancialInstitution");

                    b.HasOne("ETL.DataAccess.Models.DimCompany", "ParentCompanyKeyNavigation")
                        .WithMany("InverseParentCompanyKeyNavigation")
                        .HasForeignKey("ParentCompanyKey")
                        .HasConstraintName("FK_DimOrganization_DimOrganization");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimCompanyAccount", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimFinancialInstitution", "FikeyNavigation")
                        .WithMany("DimCompanyAccount")
                        .HasForeignKey("Fikey")
                        .HasConstraintName("FK_DimAccounts_DimFinancialInstitution");

                    b.HasOne("ETL.DataAccess.Models.DimCompany", "OrganizationKeyNavigation")
                        .WithMany("DimCompanyAccount")
                        .HasForeignKey("OrganizationKey")
                        .HasConstraintName("FK_DimAccount_DimOrganization");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimProductSubcategory", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimProductCategory", "ProductCategoryKeyNavigation")
                        .WithMany("DimProductSubcategory")
                        .HasForeignKey("ProductCategoryKey")
                        .HasConstraintName("FK_DimProductSubcategory_DimProductCategory");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.DimUnitOfMeasure", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimUnitOfMeasure", "ConversionKeyNavigation")
                        .WithMany("InverseConversionKeyNavigation")
                        .HasForeignKey("ConversionKey")
                        .HasConstraintName("FK_DimUnitOfMeasure_DimUnitOfMeasure");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactCitcollection", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimDate", "CollectionDateKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("CollectionDateKey")
                        .HasConstraintName("FK_FactCITCollection_DimDate");

                    b.HasOne("ETL.DataAccess.Models.DimTime", "CollectionTimeKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("CollectionTimeKey")
                        .HasConstraintName("FK_FactCITCollection_DimTime");

                    b.HasOne("ETL.DataAccess.Models.DimCompany", "CompanyKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("CompanyKey")
                        .HasConstraintName("FK_FactCITCollection_DimCompany");

                    b.HasOne("ETL.DataAccess.Models.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_FactCITCollection_DimCurrency");

                    b.HasOne("ETL.DataAccess.Models.DimDataVendor", "DataVendorKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("DataVendorKey")
                        .HasConstraintName("FK_FactCITCollection_DimDataVendor");

                    b.HasOne("ETL.DataAccess.Models.DimLocation", "LocationKeyNavigation")
                        .WithMany("FactCitcollection")
                        .HasForeignKey("LocationKey")
                        .HasConstraintName("FK_FactCITCollection_DimLocation");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactFitransaction", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimCompany", "CompanyKeyNavigation")
                        .WithMany("FactFitransaction")
                        .HasForeignKey("CompanyKey")
                        .HasConstraintName("FK_FactFITransaction_DimOrganization");

                    b.HasOne("ETL.DataAccess.Models.DimDate", "DateKeyNavigation")
                        .WithMany("FactFitransaction")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactFITransaction_DimDate");

                    b.HasOne("ETL.DataAccess.Models.DimTime", "TimeKeyNavigation")
                        .WithMany("FactFitransaction")
                        .HasForeignKey("TimeKey")
                        .HasConstraintName("FK_FactFITransaction_DimTime");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactProductInventory", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimCompany", "CompanyKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("CompanyKey")
                        .HasConstraintName("FK_FactProductInventory_DimOrganization");

                    b.HasOne("ETL.DataAccess.Models.DimDate", "DateKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("DateKey")
                        .HasConstraintName("FK_FactProductInventory_DimDate");

                    b.HasOne("ETL.DataAccess.Models.DimLocation", "LocationKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("LocationKey")
                        .HasConstraintName("FK_FactProductInventory_DimLocation");

                    b.HasOne("ETL.DataAccess.Models.DimProduct", "ProductKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("ProductKey")
                        .HasConstraintName("FK_FactProductInventory_DimProduct");

                    b.HasOne("ETL.DataAccess.Models.DimTime", "TimeKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("TimeKey")
                        .HasConstraintName("FK_FactProductInventory_DimTime");

                    b.HasOne("ETL.DataAccess.Models.DimDataVendor", "VendorKeyNavigation")
                        .WithMany("FactProductInventory")
                        .HasForeignKey("VendorKey")
                        .HasConstraintName("FK_FactProductInventory_DimDataVendor");
                });

            modelBuilder.Entity("ETL.DataAccess.Models.FactSales", b =>
                {
                    b.HasOne("ETL.DataAccess.Models.DimCompany", "CompanyKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("CompanyKey")
                        .HasConstraintName("FK_FactSales_DimOrganization");

                    b.HasOne("ETL.DataAccess.Models.DimCurrency", "CurrencyKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("CurrencyKey")
                        .HasConstraintName("FK_FactSales_DimCurrency");

                    b.HasOne("ETL.DataAccess.Models.DimLocation", "LocationKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("LocationKey")
                        .HasConstraintName("FK_FactSales_DimLocation");

                    b.HasOne("ETL.DataAccess.Models.DimDate", "OrderDateKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("OrderDateKey")
                        .HasConstraintName("FK_FactSales_DimDate");

                    b.HasOne("ETL.DataAccess.Models.DimTime", "OrderTimeKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("OrderTimeKey")
                        .HasConstraintName("FK_FactSales_DimTime");

                    b.HasOne("ETL.DataAccess.Models.DimProduct", "ProductKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("ProductKey")
                        .HasConstraintName("FK_FactSales_DimProduct");

                    b.HasOne("ETL.DataAccess.Models.DimPromotion", "PromotionKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("PromotionKey")
                        .HasConstraintName("FK_FactSales_DimPromotion");

                    b.HasOne("ETL.DataAccess.Models.DimEmployee", "SalesEmployeeKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("SalesEmployeeKey")
                        .HasConstraintName("FK_FactSales_DimEmployee");

                    b.HasOne("ETL.DataAccess.Models.DimDataVendor", "VendorKeyNavigation")
                        .WithMany("FactSales")
                        .HasForeignKey("VendorKey")
                        .HasConstraintName("FK_FactSales_DimDataVendor");
                });
#pragma warning restore 612, 618
        }
    }
}
